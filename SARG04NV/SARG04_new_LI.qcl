set dump-format "b";

operator ustawKubit(int baza,int pojedynczyBitKlucza,qureg kubit){
	if pojedynczyBitKlucza == 1{Not(kubit);}
	if baza == 1{H(kubit);}
}
operator odbiorKubitu(int baza,qureg kubit){
	if baza== 1{H(kubit);}
	//print "Stan kubitu przed pomiarem";
	//measure kubit, pomiarBolka;
}
int losuj(real rand){
	if rand < 0.5{
		return 0;
	}
	else{
		return 1;
	}
}
string baza(int baza)
{
	if baza == 0{
		return "prosta";
	}
	else{
		return "ukosna";	
	}
}
int polaryzacja(int baza, int kierunek){
	if baza(baza) == "prosta"{
		if kierunek == 0{
			return 0;
		}
		else{
			return 90;
		}
	}
	else{
		if kierunek == 0{
			return 45;
		}
		else{
			return 135;
		}
	}
}
real liczbaBledow(int vector kluczWygenerowany, int vector kluczOtrzymany, int dlugoscKlucza){
	int iterator1;
	real error;
	for iterator1 = 0 to dlugoscKlucza-1{
		if kluczWygenerowany[iterator1] != kluczOtrzymany[iterator1]{ error = error +1;}
	}
	return error;
}

real procentBledow(real error, int dlugoscKlucza){
	real errorToKeyLength = error/dlugoscKlucza;
	return errorToKeyLength;
}
boolean sprawdzaniePojedynczegoBitu(int bitAlicji, int bitBolka){
	return bitAlicji == bitBolka; 
}
boolean sprawdzanieKluczy(int dlugoscKluczy, int vector kluczWygenerowany, int vector kluczOtrzymany){
	int iterator2 = 0;
	while iterator2 < dlugoscKluczy{
		if not sprawdzaniePojedynczegoBitu(kluczWygenerowany[iterator2],kluczOtrzymany[iterator2]){
			return false;
		}
		iterator2 = iterator2 + 1;
	}
	return true;
}
qureg kubit[1];

//SCHEMAT KODOWANIA
//BAZA PROSTA -> 0
//BAZA UKOSNA -> 1

int kierunekPolaryzacji;
int dlugoscKlucza;
int bazaAlicji;
int bazaBolka;
int pojedynczyBitKlucza;

int kierunekWBazieProstej;
int kierunekWBazieUkosnej;
input "Podaj dlugosc klucza", dlugoscKlucza;
int vector bazyAlicji[dlugoscKlucza];
int vector bazyBolka[dlugoscKlucza];
int vector bazyEwy[dlugoscKlucza];

int vector kluczWygenerowany[dlugoscKlucza];
int pomiarBolka;
int pomiarEwy;
int vector kluczOtrzymany[dlugoscKlucza];
int vector kluczPrzechwycony[dlugoscKlucza];

int iterator0 = 0;
print "-------WYSŁANE KUBITY--------";
while iterator0 < dlugoscKlucza
{
	pojedynczyBitKlucza = losuj(random());
	//kluczWygenerowany[iterator0] = pojedynczyBitKlucza;
	print "Bit klucza:", pojedynczyBitKlucza;
	bazyAlicji[iterator0] = pojedynczyBitKlucza;//losuj(random());//bazaAlicji;
	print "Baza Alicji:", baza(bazyAlicji[iterator0]);
	kierunekWBazieProstej = losuj(random());
	print "Kierunek w bazie Prostej: ", polaryzacja(0,kierunekWBazieProstej);
	kierunekWBazieUkosnej = losuj(random());
	print "Kierunek w Bazie Ukosnej: ", polaryzacja(1,kierunekWBazieUkosnej);
	//kierunekPolaryzacji = polaryzacja(bazyAlicji[iterator0], pojedynczyBitKlucza);
	//print "KierunekPolaryzacji:",kierunekPolaryzacji;
	if bazyAlicji[iterator0] == 0{
		kierunekPolaryzacji = kierunekWBazieProstej;
	}
	else{
		kierunekPolaryzacji = kierunekWBazieUkosnej;	
	}
	ustawKubit(bazyAlicji[iterator0], kierunekPolaryzacji, kubit);
//---ATAK-EWY---
	bazyEwy[iterator0] = bazyAlicji[iterator0];
	odbiorKubitu(bazyEwy[iterator0],kubit);
	measure kubit, pomiarEwy;
	odbiorKubitu(bazyEwy[iterator0],kubit);
	bazyBolka[iterator0] = losuj(random());
	print "Baza Bolka:", baza(bazyBolka[iterator0]);
	odbiorKubitu(bazyBolka[iterator0],kubit);
	measure kubit,pomiarBolka;
	print "Pomiar Bolka:", polaryzacja(bazyBolka[iterator0],pomiarBolka);
	print "Otrzymany bit klucza:", pomiarBolka;
	if bazyBolka[iterator0] == 0
	{
		if kierunekWBazieProstej != pomiarBolka
		{
			kluczWygenerowany[iterator0] = pojedynczyBitKlucza;
			kluczOtrzymany[iterator0] = (bazyBolka[iterator0] * -1) + 1;
			kluczPrzechwycony[iterator0] = bazyEwy[iterator0];
			iterator0 = iterator0 + 1;
		}
		else
		{
			print "Bit niewykorzystany";
		}
	}
	else
	{
		if kierunekWBazieUkosnej != pomiarBolka
		{
			kluczWygenerowany[iterator0] = pojedynczyBitKlucza;
			kluczOtrzymany[iterator0] = (bazyBolka[iterator0] * -1) +1;
			kluczPrzechwycony[iterator0] = bazyEwy[iterator0];
			iterator0 = iterator0 + 1;
		}
		else
		{
			print "Bit niewykorzystany";
		}
	}
	if iterator0 <= dlugoscKlucza -1{print "--------NASTEPNY KUBIT----------";}
	reset;
	
	
}//petla glowna
print "Klucz wygenerowany przez Alicję: ",kluczWygenerowany;
print "Klucz otrzymany przez Bolka:", kluczOtrzymany;
print "Klucz przechwycony przez Ewe:", kluczPrzechwycony;
if not sprawdzanieKluczy(dlugoscKlucza, kluczWygenerowany, kluczOtrzymany){
	print "Wykryto podsluch";
}
//int iterator1;
//real errorToKeyLength;

//for iterator1 = 0 to dlugoscKlucza-1{
//	if kluczWygenerowany[iterator1] != kluczOtrzymany[iterator1]{ errorToKeyLength = errorToKeyLength +1;}
//}
//errorToKeyLength = errorToKeyLength/dlugoscKlucza;
real liczbaBledown = liczbaBledow(kluczWygenerowany, kluczOtrzymany, dlugoscKlucza);
real stopienPrzechwycenia = liczbaBledow(kluczWygenerowany, kluczPrzechwycony, dlugoscKlucza); 
print "Statystyka pomyłek:", procentBledow(liczbaBledown, dlugoscKlucza);
print "Stopien przechwycenia:", procentBledow(stopienPrzechwycenia, dlugoscKlucza);
