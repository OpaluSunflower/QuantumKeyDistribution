set dump-format "b";

int losuj(real rand){
    if rand < 0.5{return 1;}
    else {return 0;}
}
int key10(int vector a){
  int i;
  int k = 1;
  int wynik=0;
  for i = #a-1 to 0 step -1{
    if a[i] == 1{
      wynik = wynik + k;
    }
    k = k*2;
  }
  return wynik;
}
int rozmiarKlucza;
input "Jakiej długości ma być klucz? ",rozmiarKlucza;

int rozmiar = ceil(rozmiarKlucza * 4.0); //sufit

qureg zrodlo[rozmiar+2];
int od = 0;
int do = rozmiar - 1;

int vector infoA[rozmiar];
int vector bazaA[rozmiar];

int vector kluczBob[rozmiar];
int vector bazaB[rozmiar]; 

int vector bazaE[rozmiar]; //Evedropper
int vector kluczEve[rozmiar];


qureg zero  = zrodlo[od]; od = od + 1;  do = do + 1;
qureg jeden = zrodlo[od]; od = od + 1; do = do + 1; Not(jeden);
qureg klucz = zrodlo[od:do]; od = od + rozmiar; 

int i;
int bazaAlice;
int bazaBob;
int zgodneBazy = 0;

int m;

for i =0 to rozmiar -1{
  infoA[i] = losuj(random()); 
  bazaA[i] = losuj(random());
  bazaB[i] = losuj(random());
  bazaE[i] = bazaA[i];//losuj(random());
  
  if bazaA[i] == bazaB[i]{zgodneBazy = zgodneBazy + 1;}

  //kopiowanie wartosci z infoA do klucz
  if infoA[i] == 0{CNot(klucz[i],zero[0]);}
  else {CNot(klucz[i],jeden[0]);}  

  //Alice
  if bazaA[i] == 1{H(klucz[i]);}

  //Eve
  if bazaE[i] == 1{
    H(klucz[i]);
    measure klucz[i], m;
    kluczEve[i] = m;
    H(klucz[i]);
  }
  else {
    CNot(klucz[i],zero[0]);
    measure klucz[i], m;
    kluczEve[i] = m;
    CNot(klucz[i],zero[0]);
  }

  //Bob
  if bazaB[i] == 1{H(klucz[i]);}
  else {CNot(klucz[i],zero[0]);}
  measure klucz[i], m;
  kluczBob[i] = m;
}
print "infoA", infoA, "(",key10(infoA),")";
print "bazaA", bazaA;

print "key E", kluczEve,"(",key10(kluczEve),")";
print "bazaE", bazaE;


print "bazaB", bazaB;
print "key B", kluczBob, "(",key10(kluczBob),")";

//dump klucz;

do = do + zgodneBazy;
int vector kluczA[zgodneBazy];
int vector kluczB[zgodneBazy];
int vector kluczE[zgodneBazy];

//raw key
int k = 0;
int pomiar;
for i=0 to rozmiar-1{

  if bazaA[i] == bazaB[i]{
     if infoA[i] == 0{
       kluczA[k] = 0;
     }
     else {
       kluczA[k] = 1;
     }
	kluczE[k] = kluczEve[i];

     measure klucz[i], pomiar;
     if pomiar == 0{
       kluczB[k] = 0;
     }
     else {
       kluczB[k] = 1;
     }

     k = k + 1;
  }
}
print "zgodne bazy", zgodneBazy;
print "Klucz ma", (zgodneBazy * 100.0)/rozmiar,"% ";
print "surowy klucz Alice:",kluczA,"(",key10(kluczA),")";
print "surowy Klucz Boba: ",kluczB,"(",key10(kluczB),")";
print "surowy Klucz Eve:", kluczE, key10(kluczE);
//sprawdzanie bledow

int vector koncowyKluczA[rozmiarKlucza]; 
int vector koncowyKluczB[rozmiarKlucza]; 
int vector indeks[zgodneBazy];
int doSprawdzenia = (zgodneBazy - rozmiarKlucza) /2;

print "do sprawd:",doSprawdzenia;
int blad = 0;
int poczatek = 0;
int koniec = zgodneBazy - 3;

while doSprawdzenia != 0{
  if kluczA[poczatek] == kluczB[poczatek]{
    indeks[poczatek] = 1;
  }
  else {
   // print "Do klucza wkradl sie blad. Poczatek";
    blad = blad + 1;
  }
  if kluczA[koniec] == kluczB[koniec]{
    indeks[koniec] = 1;
  }
  else{
   // print "Do klucza wkradl sie blad. Koniec";
    blad = blad + 1;
  }
  poczatek = poczatek + 2;
  koniec = koniec - 2;
  doSprawdzenia = doSprawdzenia - 1;
}
k=0;
for i=0 to zgodneBazy-1{
 if k < rozmiarKlucza and indeks[i] == 0{
   koncowyKluczA[k] = kluczA[i];
   koncowyKluczB[k] = kluczB[i];
   k = k + 1;
 }
}


print "przeslano: ",rozmiar;
print "Bledy: ",blad; 
print "p-stwo:",(blad / (#koncowyKluczA * 1.0));
print "finalna dlugosc",#koncowyKluczA; 
print koncowyKluczA,"(",key10(koncowyKluczA),")";
print koncowyKluczB,"(",key10(koncowyKluczB),")";


